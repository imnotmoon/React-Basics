
가장 본질적인거 세개
1. coding
2. run
3. deploy
이 세가지를 빠르게 살펴본다

create-react-app


- public : index.html이 있는곳.
<div id="root"></div>
우리가 만든 컴포넌트들이 id가 root인 곳 안에 들어가도록 create-react-app은 설정해놨다.
그래서 html을 보면

<div id="root>
    <div class="App></div>
</div>
이런 컴포넌트들은 src폴더 안에서 만들게 된다.
대부분의 코딩은 src 안에서 진행됨.

- index.js
ReactDOM.render(<App />, document.getElementById('root'))
<App />은 사용자가 만든 사용자 정의 컴포넌트.
import App from './App';    -> src/App.js에 있다.

컴포넌트는 두가지 타입
- function type     - class type
일단 이 강의에서는 class type만 다루도록 한다. rcc

- 반드시 하나의 태그만 리턴(렌더) 해야함.



#### CSS 코딩하는법 ####
create-react-app의 지배 하에 css 코딩은 어떻게 할것인가?
index.js

$ 정리 : index.js + index.css가 첫 페이지. <div id='root'></div> 안에 컴포넌트들을 채운다.
컴포넌트는 App.js + App.css로 작성하고 하나의 태그만 리턴(렌더)해야 한다.
저게 아마 하나의 서비스 단위로 나뉘겠지.
/App/App.js, App.css ... 이런식으로 모아두면 편리할듯.


#### deploy ####
create-react-app의 무게는 상당히 무겁다.
아무것도 없는데 약 1.7메가 정도
create-react-app은 개발환경을 실행시킬때는 npm run start
production mode의 애플리케이션을 만들때(빌드)는 npm run build
    => 이전에는 없었던 build라는 디렉토리가 생긴다.
    => build/index.html을 보면 불필요한 내용들이 싹 사라져있다.
    create-react-app이 알아서 다 해준다.
웹서버가 바라보는 root directory 안에 build 안의 내용을 전부 갖다두면 됨

1. 빌드 (npm run build)
2. 웹서버 켜기 (npx serve -s build) : build 디렉토리를 배포한다.


#### component ####
class / function
하나의 render 함수에는 하나의 root tag
Class를 태그로 사용할 수 있게 됨.

#### props ####
html tag의 정보를 가져다 동적으로 태그를 생성할 수 있는 기술.

#### state ####
props vs. state :
    props : component의 동작을 바꾸고싶을때. 사용자에게 중요한 정보.
    state : 사용자는 알필요도 없고, 알아서도 안되는 컴포넌트 내부적으로 사용되는 정보(변수)들.
        내부 부품같은 느낌.
    이 두개가 철저하게 분리되어있어야 한다.

key props
복수의 엘리먼트를 생성할대는 key라는 특수한 props를 사용해야 한다.


#### event ####
React에서는 state값이 바뀌면 해당 컴포넌트의 render() 함수가 다시 호출된다.
    => 화면이 다시 그려진다.
    render()는 어떤 hTML을 그리는것인지 결정하는 함수.
onClick() 함수는 내부적으로 Event 객체를 준다고 약속되어있음.
a 태그의 기본 동작을 멈추고 onClick()에 의해 제어받도록 한다. 
    e.preventDefault();

this.state.mode = 'read'가 에러가 나는 이유?
    1. onClick 함수 안에서는 어떤 컴포넌트도 가리키지 않고 아무것도 세팅되어있지 않는다.
        함수객체를 가리키는게 아니다. undefined.
        => function() {}.bind(this)
        // 상위객체의 this를 함수에 bind 한다.
    2. this.state.mode = 'adf'는 리액트가 state 변화를 감지 못한다.
        => this.setState({mode : 'read'})

render() 안에서 this는 컴포넌트 자기 자신을 가리킨다.
onClick() = function() {
    여기서 this는 undefined
}
그래서 .bind(this)로 컴포넌트의 this를 주입해야함.
엄밀히 말하면 새 함수가 만들어지는것.

bind / call
call(obj) : 함수 내부에서 this를 obj로 간주한다.
bind(obj) : this를 인자객체로 하는 새로운 함수를 return.
    var sum2 = sum.bind(obj);
    obj다음으로 넣을 파라미터는 원래 함수의 파라미터.

setState()
constructor에서는 아무렇게나 해도 상관없음.
컴포넌트 생성 이후 동적으로 state를 바꿀때는 this.state.~ = ~ 이런식으로 하면 안된다.
React 입장에서는 이렇게 바꾸면 바꿨는지 모른다.
바뀌긴 하지.. 근데 리액트가 모른다.

setState()이후?
1. state 변경
2. render() 호출


onChangePage=
이거도 결국엔 props임. onChangePage=function() {}.bind(this)로 함수자체를 인자로 넘겨주고
원래의 컴포넌트에서는 그 함수를 실행시켜주기만 하면 된다.
이벤트 객체에는 target이 있음. 어떤 태그에서 이벤트가 발생했는지 알려준다.
    => 태그마다 아이디가 존재한다면 그 아이디에 접속해 인덱스나 변수를 알아낼 수 있다. 