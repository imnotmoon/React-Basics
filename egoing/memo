
가장 본질적인거 세개
1. coding
2. run
3. deploy
이 세가지를 빠르게 살펴본다

create-react-app


- public : index.html이 있는곳.
<div id="root"></div>
우리가 만든 컴포넌트들이 id가 root인 곳 안에 들어가도록 create-react-app은 설정해놨다.
그래서 html을 보면

<div id="root>
    <div class="App></div>
</div>
이런 컴포넌트들은 src폴더 안에서 만들게 된다.
대부분의 코딩은 src 안에서 진행됨.

- index.js
ReactDOM.render(<App />, document.getElementById('root'))
<App />은 사용자가 만든 사용자 정의 컴포넌트.
import App from './App';    -> src/App.js에 있다.

컴포넌트는 두가지 타입
- function type     - class type
일단 이 강의에서는 class type만 다루도록 한다. rcc

- 반드시 하나의 태그만 리턴(렌더) 해야함.



#### CSS 코딩하는법 ####
create-react-app의 지배 하에 css 코딩은 어떻게 할것인가?
index.js

$ 정리 : index.js + index.css가 첫 페이지. <div id='root'></div> 안에 컴포넌트들을 채운다.
컴포넌트는 App.js + App.css로 작성하고 하나의 태그만 리턴(렌더)해야 한다.
저게 아마 하나의 서비스 단위로 나뉘겠지.
/App/App.js, App.css ... 이런식으로 모아두면 편리할듯.


#### deploy ####
create-react-app의 무게는 상당히 무겁다.
아무것도 없는데 약 1.7메가 정도
create-react-app은 개발환경을 실행시킬때는 npm run start
production mode의 애플리케이션을 만들때(빌드)는 npm run build
    => 이전에는 없었던 build라는 디렉토리가 생긴다.
    => build/index.html을 보면 불필요한 내용들이 싹 사라져있다.
    create-react-app이 알아서 다 해준다.
웹서버가 바라보는 root directory 안에 build 안의 내용을 전부 갖다두면 됨

1. 빌드 (npm run build)
2. 웹서버 켜기 (npx serve -s build) : build 디렉토리를 배포한다.


#### component ####
class / function
하나의 render 함수에는 하나의 root tag
Class를 태그로 사용할 수 있게 됨.

#### props ####
html tag의 정보를 가져다 동적으로 태그를 생성할 수 있는 기술.