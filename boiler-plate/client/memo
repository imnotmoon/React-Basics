
#### react-router-dom ####
리액트 FE 환경에서 페이지 이동을 쉽게 해주는 라우팅 라이브러리

#### node server, react client ####
리액트 클라이언트가 노드 서버와 통신하는 과정에서
CORS 이슈를 해결해야함.
CORS : 포트가 다른 엔드포인트로 리퀘스트를 보낼 수 없도록(보안상) 컨트롤하는 정책.
    => FE, BE 모두 컨트롤할 수 있는 상황이라면 가장 좋음. 각각 세팅
    => Proxy 사용

Proxy:
일단 http-proxy-middleware 모듈을 통해 문제를 해결.
프록시가 무엇인가?
    Proxy Server가 유저와 인터넷 사이에 위치한다.
    Proxy Server는 여러 기능.
        1. 방화벽 기능
        2. 웹 필터 기능
        3. 캐시 데이터, 공유 데이터 제공 가능 (static data등을 저장해두면 굳이 인터넷까지 접근하지 않아도 된다.)
        4. 유저의 아이피를 임의로 바꿔서 접근하는 사람의 IP를 모르게 할수도
        5. 보내는 데이터도 임의로 바꿀 수 있음

ex) 
직원이 이런 사이트를 안들어갔으면 좋겠다 => 프록시 서버로 막아둔다.
어린이들 유해 콘텐츠 차단
캐시를 이용해서 데이터를 보관해두고 유저가 굳이 인터넷까지 접근하지 않아도 되도록
IP를 바꿈으로써 더 나은 보안을 제공


#### Concurrently ####
프론트, 백 서버 한번에 켜기
"dev": "concurrently \"npm run start\" \"npm run start --prefix client\""
이런식으로.
외에 다른 특별한 기능은 없다.


#### Redux ####
predictable state container for JS apps.
state 관리 라이브러리.
props vs. state
    Props : 컴포넌트간에 데이터 이동은 prop. 위에서 아래로만 보낼수가 있다.
            부모 -> 자식한테 1을 주면 자식에서는 props 1이 변할 수 없다. (IMMUTABLE)
    State : 그냥 그 컴포넌트 안에서 데이터를 이동하거나 전달하려 할 때.
            그냥 이 안에서도 충분히 State를 변하게 할 수 있다. (MUTABLE).
            State가 변하면 re-rendering되는 성격도 갖고 있다.
            Object로 보관
    => Redux manages State.

iOS의 NotificationCenter랑 비슷한거 맞네..
컴포넌트와 별개로 Store를 하나 만든 다음 Store를 데이터 허브처럼 사용.

Redux의 데이터 플로우
1. 컴포넌트에서(Dispatch)
2. Action
    객체. 무엇이 일어났는지를 설명하는 객체
    {type : 'LIKE_ARTICLE', article_Id : 42}
3. Reducer
    이전 state와 action object를 받은 후 next state를 리턴한다.
    action에 의해 어떻게 변할지를 여기서 처리
4. Store
    전체적인 app의 state를 감싸주는 역할.
    여러가지 많은 메소드들이 있고. 이걸 이용해서 state를 관리할 수 있음.
5. 컴포넌트(Subscribe)

!! 철저하게 한 방향으로만 흐른다 !!

리덕스의 state를 바꾸기 위한 유일한 방법은 Dispatch
Store에서 받을 수 있는 객체 형식은 Action.
미들웨어 라이브러리를 추가로 받으면 Function / Promise도 받을 수 있게 된다.
redux-promise와 redux-thunk는 리덕스를 더 잘 사용할 수 있게 도와주는 미들웨어다.


#### Hooks ####
기본적인 리액트 컴포넌트는 Class component / Functional component 이렇게 두가지
Class Component 
    더 많은 기능들을 사용 가능.
    대신 코드가 더 길어지고 복잡해지고 성능적인 면에서 손해
Functional Component
    제공하는 기능들이 한정적인 반면 코드가 짧고 간단.
    성능은 클래스 컴포넌트보다는 좋다.

Functional component에서 쓰지 못하는 기능들?
1. lifecycle(constructor, ...) - functional component에서는 아무것도 쓸 수 없다.
    constructor() : state 부여
    render() : jsx(유사html). DOM에 알맞게 컴포넌트를 넣어주는것. 렌더링
    componentDidMount() : 데이터를 가져오거나 뭐 그런..
    (업데이트)
    componentDidUpdate()
    (제거)
    componentWillUnmount()
2. React Hooks 이후로는 functional 컴포넌트에서도 다 쓸 수 있어서 좋아진것.

useState, useEffect를 통해서 함수형 컴포넌트를 클래스 컴포넌트와 똑같이 작성할 수 있다.
대신 성능은 더 좋지.

대충 이렇게 생각하면 된다.
constructor() == useState()
componentDidMount() == useEffect()
